% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/update.R
\name{dyUpdate}
\alias{dyUpdate}
\title{dyUpdate allows in-situ replacement of the rendered timeseries in dygraph within shiny, rather than
rerendering the widget on each data change.  This can be used for "real-time" update changes in
sampling, etc.}
\usage{
dyUpdate(session, id, data)
}
\arguments{
\item{session}{shiny session}

\item{id}{graph identifier (refers to the dygraph elementId parameter)}

\item{data}{the latest data set to be rendered (must have the same number of columns as the original data set)}
}
\description{
dyUpdate allows in-situ replacement of the rendered timeseries in dygraph within shiny, rather than
rerendering the widget on each data change.  This can be used for "real-time" update changes in
sampling, etc.
}
\note{
See the \href{https://rstudio.github.io/dygraphs/}{online documentation} for
additional details and examples.
}
\examples{
require(shiny)
require(dygraphs)

app = function () {
   newdata <- function(n = 1000) {
      vclose <- cumsum(rnorm(n,sd=0.25))
      vlow <- vclose - abs(rnorm(n,sd=0.25))
      vhigh <- vclose + abs(rnorm(n,sd=0.25))
      vopen <- c(vlow[1], vclose[1:(NROW(vclose)-1)])
      times <- as.POSIXct((1:n)*5, origin='2018-1-1 00:00:00', tz='UTC')
      data.frame(open=vopen, high=vhigh, low=vlow, close=vclose, row.names = times)
   }
   graph = function() {
      bars <- newdata()
      v1 <- dygraph(bars, height=650, width='100\%', elementId='graph1') \%>\% 
         dyCandlestick() \%>\% 
         dyOptions(labelsUTC = TRUE)
      htmltools::browsable(v1)
   }

   ui <- fluidPage(
      sidebarLayout(sidebarPanel(actionButton("button", "regenerate")),
      mainPanel(graph())))
       
   events <- function (input, output, session) {
      observeEvent(input$button, {
         bars <- newdata()
         dyUpdate (session, 'graph1', bars)
      })
   }

   shinyApp(ui = ui, server = events, options=list(port=5432, host="127.0.0.1"))
}

app()

}
